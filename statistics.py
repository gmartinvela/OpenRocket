import fileinput
import math
import collections
import time
import numpy as np
from pylab import *
from matplotlib import pyplot as plt
import matplotlib.mlab as mlab
import pandas as pd

#file_path = '/media/ABB4-4F3A/DATALOG.TXT'
file_path = 'DATALOG.TXT'

def txt_to_dataframes(txt_file, pattern):
	'''
	Find all the blocks generated by the rocket and convert it to dataframes
	Return: Dataframes containing all the different blocks of data in the .txt file
	'''
	num_times_find_pattern = []
	for num_line, line in enumerate(fileinput.input(txt_file)):
		if pattern in line:
			num_times_find_pattern.append(num_line)	
	max_num_line = max(enumerate(fileinput.input(txt_file)))
	num_times_find_pattern.append(max_num_line[0])
	#print num_times_find_pattern
	num_lines_list = []
	for num in num_times_find_pattern:
		if num == 0:
			num_prev = num
		else:
			num_lines_list.append(num - num_prev - 1)
			num_prev = num
	#print num_lines_list
	dataframes = []
	reader = pd.read_table(file_path, sep=',', iterator=True)
	for num_line in num_lines_list:
		lines = reader.get_chunk(num_line)
		#print lines
	return dataframes

def extract_valid_launches(dataframes, min_milliseconds_launch = 8000, milliseconds_write_cycle_mean = 23):
	'''
	Find the valid launches generated by the rocket
	Params:
		min_milliseconds_launch = 8000. By default each launch it is supposed to take 8 seconds minimum
		milliseconds_write_cycle_mean = 23. By default each Arduino write cycle is 23 milliseconds
	Return: Valid dataframes with real launches
	'''
	# minimum entries by default will be 348
	minimum_entries = int(min_milliseconds_launch / milliseconds_write_cycle_mean)
	valid_dataframes = []
	for dataframe in dataframes:
		if dataframe.count() > minimum_entries:
			valid_dataframes.append(dataframe)
	return valid_dataframes


dataframes = txt_to_dataframes(file_path, "m")
# valid_dataframes = extract_valid_launches(dataframes)
# print valid_dataframes

#reader = pd.read_table(file_path, sep=',', iterator=True)
#r = reader.get_chunk(588)
#print r